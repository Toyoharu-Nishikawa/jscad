
import {view} from "./view.js"
import {icon} from "./images/icon.js"

"use strict"

const loginEve = document.createEvent("Event")
loginEve.initEvent("login",true,true)

const loginErrorEve = document.createEvent("Event")
loginErrorEve.initEvent("loginError",true,true)

const logoutEve = document.createEvent("Event")
logoutEve.initEvent("logout",true,true)

const model = {
  certificationURL: "/necoengine/api/login",
  logoutURL: "/necoengine/api/logout",
  createAccountURL: "/necoengine/api/createAccount",
  checkLoginedURL:  "/necoengine/api/checkLogined",
  engineVisitURL:"/necoengine/api/visit",
  engineChangePinURL:"/necoengine/api/changepin",
  engineGetPinsURL:"/necoengine/api/getpins",
  visit:{
    exec:function(){
      const pathname = location.pathname
      const list = pathname.split("/")
      const application = list[1] || "toppage"
      const userEmail = window.localStorage.getItem("userEmail") || "anonymous"
      const url = model.engineVisitURL 
      const data = {
        body: JSON.stringify({application:application, email:userEmail}),
        cache: "no-cache",
        credentials: "same-origin",
        headers: {"content-type":"application/json"},
        method: "POST",
        mode: "cors",
        redirect: "follow",
        referror: "no-referror",
      }
      fetch(url,data)
        .then(response=>response.json())
    }
  },
  checkLogined: {
    exec: function(callback){
      const userEmail = window.localStorage.getItem("userEmail") 
      const url = model.checkLoginedURL 
      const data = {
        body: JSON.stringify({email:userEmail}),
        cache: "no-cache",
        credentials: "same-origin",
        headers: {"content-type":"application/json"},
        method: "POST",
        mode: "cors",
        redirect: "follow",
        referror: "no-referror",
      }
      const main= async()=>{
        const response = await fetch(url,data)
        const json = await response.json()
        const flag = json.propriety
        const promise = new Promise((resolve,reject)=>{
          resolve(flag)
        }) 
        const res = callback ? callback(flag):promise
        return res
      }
      return main()
    },
  },
  getPins: {
    exec: function(){
      const userEmail = window.localStorage.getItem("userEmail") 
      const url = model.engineGetPinsURL 
      const data = {
        body: JSON.stringify({email:userEmail}),
        cache: "no-cache",
        credentials: "same-origin",
        headers: {"content-type":"application/json"},
        method: "POST",
        mode: "cors",
        redirect: "follow",
        referror: "no-referror",
      }
      const main= async()=>{
        try{
          const response = await fetch(url,data)
          const json = await response.json()
          return new Promise((resolve,reject)=>{
            resolve(json)
          }) 
        }
        catch(e){
          console.log(e.message)
          return new Promise((resolve,reject)=>{
            resolve({propriety:false, pins: []})
          }) 
        }
      }
      return main()
    },
  },
  login: {
    exec: function(){
      const emailElement = view.elements.loginEmail
      const passwordElement = view.elements.loginPassword
    
      const email = emailElement.value
      const password = passwordElement.value
    
      const url = model.certificationURL 
      const data = {
        body: JSON.stringify({email:email, password:password}),
        cache: "no-cache",
        credentials: "same-origin",
        headers: {"content-type":"application/json"},
        method: "POST",
        mode: "cors",
        redirect: "follow",
        referror: "no-referror",
      }
      const main = async ()=>{
        const response = await fetch(url,data)
        const json = await response.json()
        const deal = await this.deal(json)
      }
      main()
    }, 
    deal: function(res){
      const messageElement = view.elements.loginMessage
      const propriety = res.propriety 
      const userEmail = res.userEmail

      if(propriety){
        window.localStorage.setItem("userEmail", userEmail)
        document.dispatchEvent(loginEve)
        window.location.href = "/"
      }
      else{
        messageElement.innerHTML = `
          Certification error.<br>
          Confirm your entered e-mail and password.<br>
          If you do not have a account, create a new account` 
        window.localStorage.removeItem("userEmail")

        document.dispatchEvent(loginErrorEve)
      }
    },
  },
  create: {
    exec: function(){
      const userNameElement = view.elements.createUserName
      const emailElement = view.elements.createEmail
      const passwordElement = view.elements.createPassword
      const confirmPasswordElement = view.elements.createConfirmPassword
      const messageElement = view.elements.createMessage

      const userName = userNameElement.value
      const email = emailElement.value
      const password = passwordElement.value
      const confirmPassword = confirmPasswordElement.value
    
      const url = model.createAccountURL 
      if(password !== confirmPassword){
        messageElement.textContent = 
        `Error:The initial password and the re-typed password do not match.`
      } 
      else {
        const information = {
          userName: userName,
          email: email,
          password: password,
          confirmPassword: confirmPassword,
        }
        const data = {
          body: JSON.stringify(information),
          cache: "no-cache",
          credentials: "same-origin",
          headers: {"content-type":"application/json"},
          method: "POST",
          mode: "cors",
          redirect: "follow",
          referror: "no-referror",
        }
        const main = async()=>{
          const response = await fetch(url,data)
          const json = await response.json()
          const deal = await this.deal(json)
        }
        main()
      }
    }, 
    deal: function(res){
      const messageElement = view.elements.createMessage
      const propriety = res.propriety 
      const userEmail = res.userEmail
      if(propriety){
        window.sessionStorage.setItem("userEmail", userEmail)
        window.location.href = "./login.html"
      }
      else{
        console.log(res)
        messageElement.innerHTML = `
          Certification error.<br>
          your entered e-mail has been already registerd.<br>
          Enter another e-mail address .<br>
          If you forget your  password, reset the password` 
      }
    },
  }, 
  setLoginButton: {
    svg: null,
    pin: null,
    pinnedFlag:false,
    exec: function(pinFlag = true){
      const userEmail = window.localStorage.getItem("userEmail")
      const svg= document.createElement("div")
      this.svg = svg
      svg.innerHTML= userEmail? icon.logout : icon.login
      svg.style.position= "absolute"
      svg.style.top = "10px"
      svg.style.right = "10px"
      svg.style.opacity = "1"
      svg.style.cursor = "pointer"
      document.body.appendChild(svg)
      svg.onclick =  this.click

      if(pinFlag){
        const pin = document.createElement("div")
        this.pin = pin 
        pin.innerHTML= icon.add 
        pin.style.display= "none"
        pin.style.position= "absolute"
        pin.style.top = "16px"
        pin.style.right = "80px"
        pin.style.opacity = "1"
        pin.style.cursor = "pointer"
        document.body.appendChild(pin)
        pin.onclick =  this.pinClick
      }

      if(userEmail){
        const main = async ()=>{
          const json = await model.getPins.exec()
          this.deal(json)
          return new Promise((resolve,reject)=>{
            resolve(json.propriety)
          })
        }
        return main()
      }
      else{
        return new Promise((resolve,reject)=>{
          resolve(false)
        }) 
      }
    },
    deal: function(json){
      const propriety = json.propriety
      model.setLoginButton.svg.innerHTML= propriety? icon.logout : icon.login
      const pin = model.setLoginButton.pin
      if(propriety){
        if(pin){
          const pins = json.pins
          const pathname = location.pathname
          const list = pathname.split("/")
          const application = list[1] 
          
          const inc = pins.includes(application) 
          model.setLoginButton.pinnedFlag = inc
          console.log("pins", pins)
          console.log("inc", inc)
          if(inc){
            pin.innerHTML= icon.sub
          }
          else{
            pin.innerHTML= icon.add
          }
          pin.style.display= "block"
        }
      }
      else{
        window.localStorage.removeItem("userEmail")
      }
    },
    click: function(){
      const userEmail = window.localStorage.getItem("userEmail")
      const svg = model.setLoginButton.svg
      const pin = model.setLoginButton.pin
      if(userEmail){ //logout
        window.localStorage.removeItem("userEmail")
        svg.innerHTML= icon.login
        if(pin){
          pin.style.display = "none"
        }
        const url= model.logoutURL 
        const data = {
          body: JSON.stringify({email: userEmail}),
          cache: "no-cache",
          credentials: "same-origin",
          headers: {"content-type":"application/json"},
          method: "POST",
          mode: "cors",
          redirect: "follow",
          referror: "no-referror",
        }
        const main = async ()=>{
          const response = await fetch(url,data)
          const json = await response.json()

          document.dispatchEvent(logoutEve)

          console.log("logout", json)
        }
        main()
      }
      else{ //login
        window.location.href="/necoengine/login.html"
      }
    },
    pinClick: function(){
      console.log("add click") 
      const pathname = location.pathname
      const list = pathname.split("/")
      const application = list[1] || "toppage"
      const pinnedFlag = model.setLoginButton.pinnedFlag
      console.log("pinnedFlag",pinnedFlag)
      const userEmail = window.localStorage.getItem("userEmail") || "anonymous"
      const url = model.engineChangePinURL 
      const data = {
        body: JSON.stringify({application:application, email:userEmail,pinnedFlag:pinnedFlag}),
        cache: "no-cache",
        credentials: "same-origin",
        headers: {"content-type":"application/json"},
        method: "POST",
        mode: "cors",
        redirect: "follow",
        referror: "no-referror",
      }
      const main = async ()=>{
        try{
          const response = await fetch(url,data)
          const json = await response.json()
          const flag = json.flag
          if(flag){
            model.setLoginButton.pin.innerHTML = pinnedFlag ? icon.add :icon.sub
            model.setLoginButton.pinnedFlag = pinnedFlag ? false : true
          }
          else{
            console.log(json.message)
          }
        }
        catch(e){
          console.log(e.message) 
        }
      }
      main()
    }
  },
}

export {model}
